Maximum Subarray
Given an integer array nums, find the subarray which has the largest sum and return its sum.

Note: Try coding solution using the divide and conquer approach
Example 1:
Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: 6
Explanation: [4,-1,2,1] has the largest sum = 6.


Example 2:
Input: nums = [1]
Output: 1


Example 3:
Input: nums = [5,4,-1,7,8]
Output: 23







code:-

#include <iostream>
#include <vector>
#include <climits>

using namespace std;

class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        if (nums.empty()) return 0;
        return findMaxSubarray(nums, 0, nums.size() - 1);
    }

private:
    int findMaxSubarray(vector<int>& nums, int left, int right) {
        if (left == right) return nums[left];
        
        int mid = left + (right - left) / 2;
        
        int leftMax = findMaxSubarray(nums, left, mid);
        int rightMax = findMaxSubarray(nums, mid + 1, right);
        int crossMax = findMaxCrossingSubarray(nums, left, mid, right);
        
        return max({leftMax, rightMax, crossMax});
    }

    int findMaxCrossingSubarray(vector<int>& nums, int left, int mid, int right) {
        int leftSum = INT_MIN, rightSum = INT_MIN, sum = 0;
        
        for (int i = mid; i >= left; --i) {
            sum += nums[i];
            leftSum = max(leftSum, sum);
        }
        
        sum = 0;
        for (int i = mid + 1; i <= right; ++i) {
            sum += nums[i];
            rightSum = max(rightSum, sum);
        }
        
        return leftSum + rightSum;
    }
};

int main() {
    int n;
    cout << "Enter the number of elements: ";
    cin >> n;
    
    if (n <= 0) {
        cout << "Maximum Subarray Sum: 0" << endl;
        return 0;
    }
    
    vector<int> nums(n);
    cout << "Enter the elements: ";
    for (int i = 0; i < n; ++i) {
        cin >> nums[i];
    }
    
    Solution solution;
    cout << "Maximum Subarray Sum: " << solution.maxSubArray(nums) << endl;
    
    return 0;
}
